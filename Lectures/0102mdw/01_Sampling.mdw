
# I. Analog and Digital Signals

## I.1 Signals

### Definition

* **Signal** = a measurable quantity which varies in time, space or some other variable

* Examples:
    - a voltage which varies in time (1D voltage signal)
    - sound pressure which varies in time (sound signal)
    - intensity of light which varies across a photo (2D image)

* Usually represented as mathematical functions, e.g. $v(t)$.


<<fig=True,echo=False,width='6cm'>>=
import matplotlib.pyplot as plt, numpy as np, math
t = np.arange(0,100)                 # this means 0,1,2,...100
v = np.sin(2*math.pi*0.03*t)         # sin(2*pi*f*t)
plt.plot(t,v)                        # plotting
plt.xlabel('time')
plt.ylabel('voltage')
plt.title('A sample sinusoidal signal $v(t)$')
@


### Unidimensional and multidimensional signals

- **Unidimensional** (1D) signal = a function of a single variable
    - Example: a voltage signal $v(t)$ only varies in time.

- **Multidimensional** (2D, 3D ... M-D) signal = a function of a multiple variables
    - Example: intensity of a grayscale image $I(x,y)$ across the surface of a photo

- In these lectures we consider only 1D signals

- The techniques which you will learn for 1D signals can also be used for multidimensional signals (usually 2D signals, images).


### Analog and discrete signals

- **Analog** signals = functions of continuous variables
    - there exists a signal value for any value of the variable within the defined range

- **Discrete** signals = functions of discrete variables
    - have values only at certain discrete values, typically indexed with integer numbers ($x[-1]$, $x[0]$, $x[1]$...)

<<fig=True,echo=False,width='12cm',f_size=(20,6)>>=
import matplotlib.pyplot as plt, numpy as np, math
tanalog = np.arange(0,100)                 # this means 0,1,2,...100
vanalog = np.sin(2*math.pi*0.03*tanalog)         # sin(2*pi*f*t)
tdiscrete = np.arange(-2, 9)
vdiscrete = np.array([0, 1, 2, 2, 1, 0, -1, -2, -2, -1, 0]) 
plt.figure(figsize=(10, 3));
plt.subplot(121)
plt.plot(tanalog,vanalog); plt.title('Analog signal $a(t)$')
plt.subplot(122)
plt.stem(tdiscrete,vdiscrete); plt.title ('Discrete signal $b[n]$')
@

### Discrete signals

- The values of a discrete signal are usually called **samples**

- The spacing between the samples is usually uniform

- **Note:** A discrete signal has **no value defined** in the space between samples
    - in these areas, it simply does not exist.

- Discrete signals are usually obtained by **sampling** analog signals.

### Notation

- Analog signal $a(t)$
    - use **round brackets**
    - variable typically denoted with $t$ (from _time_), e.g. $a(t)$. 

- Discrete signal $x[n]$
    - use **square brackets**
    - variable is typically denoted with $n$, or sometimes $k$ (suggest natural numbers)

- Examples: 
    - $a(1)$ and $a(3.23542)$ are the values of signal $a(t)$ at time $t=2$ and $t=3.23542$
    - $b[-1]$ and $b[2]$ are the values of $b[n]$ at discrete time $n=-1$ and $n=2$
    - Writing $x[1.3]$ is incorrect: $x[n]$ is only defined for integer values of $n$.

### Signals with continuous and discrete values

- Besides the variable, the _value_ of the signal can also be continuous or discrete

- Signal with continuous values: can have any value in a certain defined range
    - Example: the voltage in one point of a circuit: any value between, for example, 0V and 5V.

- Signal with discrete values: can only have a value from a discrete set of possible values
    - Example: the number of bits received in a second over a binary communication channel

## I.2 Discrete and analog frequency

### Periodicity

- **Periodic** signal: if its values repeat themselves after a certain time (known as **period**)

- For an analog signal:
$$x(t) = x(t+T), \forall t$$

- For a discrete signal:
$$y[n] = y[n + N]), \forall t$$

- **Fundamental period** = the minimum value of $T$ or $N$
    - multiples of $T$ or $N$ are also periods, but non-fundamental
    - shorthand notation: from now on, by  _"period"_ we will mean the fundamental period.

- For analog signals, the period has unit _seconds_
    - $T$ is time

- For digital signals the period is _adimensional_
    - $N$ is just a number, has no unit attached

### Frequency

- Fundamental frequency of a periodic signal = inverse of the period

- For **analog signals**:
$$F = \frac{1}{T}$$
- The unit is:
$$[F] = \frac{1}{s} = Hz$$

- For **discrete signals**:
$$f = \frac{1}{N}$$
- Has no unit, since $N$ has no unit also.

- Notation:
    - frequencies of analog signals with $F$ (capital letter)
    - frequencies of discrete signals with $f$ (small letter)

### Frequency example
- An analog cosine with a frequency of $F = 0.1 Hz$
$$x(t) = cos(2 \cdot \pi \cdot 0.1 \cdot t )$$

- A discrete cosine with a frequency of $f = 0.1$.
$$x[n] = cos(2 \cdot \pi \cdot 0.1 \cdot t )$$

### Pulsation

- For harmonic signals, the pulsation = $\omega = 2 \pi f$ for both analog and discrete signals

- We use $\omega$ when treating harmonic signals like _cos()_ or _sin()_, e.g. $$cos(\omega t) = cos(2 \pi f t)$$.

### Domain of existence

- Analog signals
    - the period can be as small as desired, $T \to 0$
    - therefore the frequency can be very large, $F_{max} = \infty$.

$$F \in (-\infty, \infty)$$

- Discrete signals
    - **the smallest period is $N = 2$** (excluding N=1 which means a constant signal)
    - therefore, the largest possible frequency is $f_{max} = \frac{1}{2}$

$$f \in [-\frac{1}{2}, \frac{1}{2}]$$

- For mathematical reasons: we will consider negative frequencies as well (remember SCS)
    - they mirror the positive frequencies.


## I.3 Sampling of analog signals

### Definition 

- Discrete signals are obtained from analog signals through **sampling**

- Sampling = taking the values from the analog signal at discrete moments of time (usually periodic)

- The time between two samples is the **sampling period $T_s$**

- The corresponding frequency is the **sampling frequency**

$$F_s = \frac{1}{T_s}$$


### Graphical example

<<fig=True,echo=False>>=
import matplotlib.pyplot as plt, numpy as np, math
t = np.arange(0,100)                 # 
xa = np.sin(2*math.pi*0.03*t)        # analog signal
Ts = 8                               # Sampling period Ts=10, sampling freq Fs = 0.1
td = t[0:101:Ts]                     # go from 0 to 100 with step=Ts, i.e. 0,10,20,...
xd = xa[td]
plt.plot(t,xa)                       # plotting
plt.stem(td,xd,'--r')
plt.xlabel('time')
plt.ylabel('voltage')
plt.title('A sample sinusoidal signal $v(t)$')
@

### Sampling equation

- Sampling equation:
$$x[n] = x_a(n \cdot Ts).$$

- Interpretation:
    - The $n$-th value in the discrete signal x[n] = the value of the analog signal taken after $n$ sampling periods, at time $t = n T_s$.

### Sampling of harmonic signals

- Consider a cosine signal $x_a(t) = cos (2 \pi F t)$, sampling frequency is $F_s$
- What is the resulting discrete signal $x[n]$?

- Applying the sampling equation:
$$\begin{split}
x[n] = x_a(n \cdot T_s) = x_a(n \cdot \frac{1}{F_s}) = cos(2 \pi F n \frac{1}{Fs}) \\ = cos(2 \pi \frac{F}{Fs} n) = cos(2 \pi f n),
\end{split}$$

- Sampling an analog cosine/sine produces a discrete cosine/sine of similar form, but with discrete frequency 
$$f = \frac{F}{F_s}$$

### Sampling example

- Analog signal: $x_a(t) = cos (2 \pi 100 t)$ 
- Sampling frequency: $F_s = 300Hz$

- Result: 
$$x[n] = cos (2 \pi \frac{1}{3} t)$$

- The discrete frequency is $f = \frac{1}{3}$

- Sampling with a different $F_s = 500Hz$ produces a different signal
$$x[n] = cos (2 \pi \frac{1}{5} t)$$

- Explain: why does sampling with a higher sampling frequency produce a signal with lower discrete frequency?

- Note: in both cases the resulting $f$ is smaller than $f_{max} = \frac{1}{2}$

### False friends

- **Note:** A discrete sinusoidal signal might not _look_ sinosoidal, when its frequency is high (close to $\frac{1}{2}$).

<<fig=True,echo=False, f_size=(14,6),width='12cm'>>=
import matplotlib.pyplot as plt, numpy as np, math
t = np.arange(0,40)                  #
x1 = np.sin(2*math.pi*0.05*t)         #  frequency 
x2 = np.sin(2*math.pi*0.25*t)          # sin(2*pi*f*t)
plt.figure(figsize=(10, 3));
plt.subplot(121)
plt.stem(t,x1); plt.title('Frequency $f = 0.05$')
plt.axis([0, 40, -1.2, 1.2])
plt.subplot(122)
plt.axis([0, 40, -1.2, 1.2])
plt.stem(t,x2); plt.title ('Frequency $f = 0.25$')
@

### Sampling theorem

**The Nyquist-Shannon sampling theorem:**

If a signal having maximum frequency $F_{max}$ is sampled with a a sampling frequency $F_s \ge 2F_{max}$, then it can be perfectly reconstructed from its samples using the formula:
$$x_a(t) = \sum_{n=-\infty}^{+\infty} x[n] \cdot \frac{sin(\pi (F_s t - n))}{\pi (F_s t - n)}.$$

**Comments**

* All the information in the original signal is contained in the samples, provided that they are sampled correctly
* We can process discrete samples instead of the original analog signals
* Sampling with $F_s \ge 2F_{max}$ means the resulting discrete frequencies are smaller than 1/2
$$f = \frac{F}{F_s} \leq \frac{F_{max}}{F_s} \leq \frac{1}{2}$$

### Aliasing

- What if the sampling frequency is not high enough?

- Obtain a discrete frequency higher than $\frac{1}{2}$

- A discrete frequency higher than $1/2$ is **identical** to a frequency smaller than $\frac{1}{2}$

- This phenomenon is known as **aliasing**

### Aliasing example

**Example**

- $x_a(t) = cos(2 \pi 10 t)$ is sampled with $F_s = 15 Hz$

- The result is 
$$x[n] = cos (2 \pi \frac{10}{15} n) = cos (2 \pi \frac{2}{3} n)$$

- But, the frequency $\frac{2}{3}$ is actually identical to $\frac{1}{3}$:

$$cos (2 \pi \frac{2}{3} n) = cos (2 \pi \frac{1}{3} n)$$

- Proof: since _cos()_ is periodical, we can subtract a multiple of $2 \pi$:

$$\begin{split}
cos (2 \pi \frac{2}{3} n) = cos (2 \pi \frac{2}{3} n - 2 \pi n) = cos (2 \pi (\frac{2}{3} - 1) n) \\ = cos (- 2 \pi \frac{1}{3} n ) = cos (2 \pi \frac{1}{3} n )
\end{split}$$


### Aliasing example

<<fig=True,echo=False,f_size=(14,6),width='linewidth'>>=
import matplotlib.pyplot as plt, numpy as np, math
n = np.arange(0,10)              
x1 = np.cos(2*math.pi*(2/3.0)*n)    # frequency = 2/3
x2 = np.cos(2*math.pi*(1/3.0)*n)    # frequency = 1/3
plt.figure(figsize=(10, 3));
plt.subplot(121)
plt.stem(n, x1); plt.title('$cos(2 \pi (2/3) n)$')
plt.subplot(122)
plt.stem(n, x2); plt.title('$cos(2 \pi (1/3) n)$')
@

### Aliasing

- http://www.dictionary.com/browse/alias:

"alias": _a false name used to conceal one's identity; an assumed name_

- Every discrete frequency above $f_{max} = \frac{1}{2}$ is equivalent (an **alias**) to a frequency that smaller than $f_{max} = \frac{1}{2}$:
$$cos (2 \pi (\frac{1}{2} + \epsilon)n) = cos (2 \pi (\frac{1}{2} - \epsilon)n)$$
$$sin (2 \pi (\frac{1}{2} + \epsilon)n) = - sin (2 \pi (\frac{1}{2} - \epsilon)n)$$

- Proof: at whiteboard

- Every frequency $f \in \mathbb{R}$ is actually identical to a frequency $f \in [-\frac{1}{2}, \frac{1}{2}]$, up to a different phase

- Note: Aliasing is only valid for discrete frequencies, not analog!

### What's the problem with aliasing?

- Problem: sampling analog signals with different frequencies, will lead to exactly the same samples

- How can we know the original frequency? Impossible

- **Note:** Always, there is only a single analog frequency $F \in [-\frac{Fs}{2}, \frac{Fs}{2}]$ that corresponds to a discrete frequency in $f \in [-\frac{1}{2}, \frac{1}{2}]$
    - No confusion if every $F < F_s/2$, i.e. sampled according to the theorem
    - Problems are only for analog frequencies which are not sampled according to the theorem

### Example 

**Example**: 

- If sampling frequency is $F_s = 15Hz$, all the following signals produce identical discrete signals:
    - $cos(2 \pi 5 t)$, $cos(2 \pi 10 t)$, $cos(2 \pi 20 t)$, $cos(2 \pi 30 t)$

- **Exercise**: which are the next signals in the above sequence, which produce the same samples?


<<fig=True,echo=False,f_size=(14,6)>>=
import matplotlib.pyplot as plt, numpy as np, math
n = np.arange(0,10)              
plt.subplot(151); plt.stem(n, np.cos(2*math.pi*(1/3.0)*n)); 
plt.subplot(152); plt.stem(n, np.cos(2*math.pi*(2/3.0)*n)); 
plt.subplot(153); plt.stem(n, np.cos(2*math.pi*(4/3.0)*n)); 
plt.subplot(154); plt.stem(n, np.cos(2*math.pi*(5/3.0)*n)); 
plt.subplot(155); plt.stem(n, np.cos(2*math.pi*(7/3.0)*n)); 
@

### Exercise

- What signals produce the following samples?

<<fig=True,echo=False,width='9cm'>>=
import matplotlib.pyplot as plt, numpy as np, math
n = np.arange(0,10)              
plt.stem(n, np.ones(10)); 
plt.axis([0,9,-0.2,1.2])
@

### Ideal reconstruction of analog signals from samples

- If the discrete frequency $f \in [-\frac{1}{2}, \frac{1}{2}]$, use the following:
$$x_r(t) = x[\frac{t}{T_s}] = x[t \cdot F_s].$$

- If $f$ outside this interval: the same equation, but **replace** $f$ with its equivalent from the interval $[-\frac{1}{2}, \frac{1}{2}]$.

- Consequence: **reconstruction leads only to analog signals with frequencies $F \in [-\frac{Fs}{2}, \frac{Fs}{2}]$** 
    - Analog signals which were sampled with at least $2F_{max}$: reconstructed identically
    - Analog signals which are not sampled correctly: **not reconstructed identically**

### Anti-alias filtering

- If a signal has frequencies $F > \frac{F_s}{2}$, it is better to eliminate these frequencies from the signal before sampling
    - If left, they will just overlap with the samples of a frequency from the base interval $[-\frac{Fs}{2}, \frac{Fs}{2}]$

- **Anti-alias filter**:  an analog low-pass filter, before a sampling circuit, designed to reject all frequencies $F > \frac{F_s}{2}$ from the signal before sampling.


## I.4 Signal quantization and coding

### Definition

- After sampling, the samples can have any real value

- **Quantization** = adjusting a value to a limited set of predefined values (**quantization levels**)

- **Quantization error** = the difference between quantized value and the original value

- Quantization methods:
    - **truncation**: choose the quantization level immediately smaller
    - **rounding**: choose the nearest quantization level

### Examples 

- Example 1 :
    - The grade of a student is 8.75, but it is adjusted to 8 or 9 (closest quantization levels)

- Example 2:
    - A voltage sample can be between 0V and 10V, but we need to store the value on one byte (8 bits)
    - With 8 bits: $2^8 = 256$ different possible values (quantization levels)
    - Divide the interval $[0-10]$ in 255 equal sub-intervals of size $$\Delta = \frac{10}{255} \approx 0.039V$$
    - Each level corresponds to one of 256 possible numeric values: $0 = 0V$, $1 \approx 0.039V$, $2 \approx 0.078V$, ...$256 = 10V$
    - The sample value can be rounded to the closest quantization level

### Coding

- **Coding** = converting a quantized value in binary form
    - a binary form can be handled by a processor or microcontroller in a digital system

- Sampling + quantization + coding are usually done by an  **Analog to Digital Converter (ADC)**.

- Reconstruction of a analog signal from numeric samples: by a **Digital to Analig Converter (DAC)**
    - Usually the reconstruction is not done based on the ideal reconstruction equations above
    - Simpler approximative methods are preferred


